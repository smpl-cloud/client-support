#!/usr/bin/env bash
# PURPOSE:  Generate some variables for GCP/GKE. This file is called with one
#           argument while sourcing it in.
# -----------------------------------------------------------------------------
#    EXEC:  source scripts/setup/build.env <prod|stage>
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Check for arguments
if [[ "$#" -lt 1 ]]; then
    echo "Bro, where's my first argument: stage or prod?"
    return
fi

set -x

# -----------------------------------------------------------------------------
# Client Truths
export TF_VAR_envBuild="$1"
export dns_zone='voilamed.com.'

# -----------------------------------------------------------------------------
# Set Organization variables
# gcloud organizations list
export TF_VAR_org_id='813003622199'

# gcloud beta billing accounts list
export TF_VAR_billing_account='01F2D2-234857-1632DB'

# -----------------------------------------------------------------------------
# Set Project variables
export myProject='voilamed'
# gcloud config configurations list

# gcloud config list --format 'value(compute.region)'
export TF_VAR_region='us-east4'

# gcloud config list --format 'value(compute.zone)'
export TF_VAR_zone="${TF_VAR_region}-a"

# Give the bucket a name
#export TF_VAR_envBucket="smplcloud-tfstate-${TF_VAR_project}"
#export TF_VAR_envBucketPrefix="env/${TF_VAR_envBuild}"
#export newClusterENV="${TF_VAR_project}-${TF_VAR_envBuild}"  # FIXME / delete?

# -----------------------------------------------------------------------------
# Set Security variables, if any
#export certDir="$(pwd)/secrets/certs"
#export certConf='./secrets/config'
#export vaultCert="$certDir/ca.pem"

# -----------------------------------------------------------------------------
# Environmental Considerations
# Terraform Constants
case "$TF_VAR_envBuild" in
    stage)
        export TF_VAR_project="${myProject}-${TF_VAR_envBuild}"
        export TF_VAR_cluster_name="${TF_VAR_project}"
        export TF_VAR_dns_zone="${TF_VAR_envBuild}.${dns_zone}"
        export TF_VAR_envBucket="smplcloud-tfstate-${TF_VAR_project}"
        export TF_VAR_minDistSize='3'
        #export TF_VAR_kubeNode_type='n1-standard-4'
        export TF_VAR_kubeNode_type='g1-small'
        ;;
    prod)
        export TF_VAR_project="$myProject"
        export TF_VAR_cluster_name="${TF_VAR_project}"
        export TF_VAR_dns_zone="${dns_zone}"
        export TF_VAR_envBucket="smplcloud-tfstate-${myProject}"
        export TF_VAR_dns_zone='voilamed.com.'
        export TF_VAR_minDistSize='3'
        export TF_VAR_kubeNode_type='n1-standard-1'
        ;;
    *)  echo "$TF_VAR_envBuild is unsupported; exiting."
        ;;
esac


# -----------------------------------------------------------------------------
# Same for either ENV; depends on case
export TF_VAR_projectCreds="$GOOGLE_APPLICATION_CREDENTIALS"
export planFile="/tmp/${TF_VAR_cluster_name}.plan"

# Vault Stuff
export svcAcctName='vault-iam'
export serviceEmail="${svcAcctName}@${TF_VAR_project}.iam.gserviceaccount.com"
export svcAcctDesc='Service Account for Vault/GCP-IAM Auth Method'
export svcAcctDispName="${svcAcctName}-auth-method"
export serviceAccount="serviceAccount:${serviceEmail}"
export svcAcctCreds="$HOME/Downloads/${svcAcctName}-${TF_VAR_project}.json"
export vaultStuff='/var/tmp/vault-stuff.env'
set +x
